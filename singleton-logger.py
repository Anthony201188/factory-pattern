""" Implement a Singleton class called Logger that keeps track of logs generated by different parts of a system. The Logger class should have the following behavior:
-It should maintain a list of log messages.
-It should provide a method called add_log that takes a message as input and adds it to the list of logs.
-It should provide a method called get_logs that returns the list of logs.

Your task is to implement the Logger class as a Singleton, ensuring that only one instance of the class can exist.
Hint: You can use the singleton decorator from today's class """

def Singleton(class_):
    instance = {}

    def get_instance(*args, **kwargs):
        if class_ not in instance:
            instance[class_] = class_(*args,**kwargs)
        print(instance)
        return instance[class_]
    return get_instance


@Singleton
class Logger:
    def __init__(self): 
        self.logged_messages = []
    
    def add_log(self, msg):
        self.msg = msg
        self.logged_messages.append(msg)
        print(f"Your message ['{msg}'] has been logged")

    def get_logs(self):
       return self.logged_messages







# Testing the Singleton Logger
logger1 = Logger()
logger1.add_log("Log message 1")

logger2 = Logger()
logger2.add_log("Log message 2")

logger3 = Logger()
logger3.add_log("Log message 3")

# All instances of the logger will have the same logs
print(logger1.get_logs())  # Output: ['Log message 1', 'Log message 2', 'Log message 3']
print(logger2.get_logs())  # Output: ['Log message 1', 'Log message 2', 'Log message 3']
print(logger3.get_logs())  # Output: ['Log message 1', 'Log message 2', 'Log message 3']